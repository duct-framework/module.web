{:duct.module/web
 {:duct/vars
  {port
   {:env PORT, :arg port, :type :int, :default 3000
    :doc "The HTTP server port (default: 3000)"}
   cookie-store-key
   {:env COOKIE_STORE_KEY, :arg "cookie-store-key KEY", :default nil
    :doc "Cookie session store key (default: random)"}}
  :doc
  "A module that adds components for web applications to the configuration.

  Takes the following options:
  - `:features` - a set of keywords that specify which features to add
  - `:handler-opts` - a map of options passed to all route handlers
  - `:middleware` - an ordered collection of middleware functions
  - `:middleware-opts` - a map of options passed to all middleware
  - `:route-middleware` - middleware that is only applied if a route matches
  - `:routes` - routing data passed to the [Reitit][1] router

  The *features* of the module determine how the module should be configured.
  - `:api` - add middleware and configration for a RESTful web API
  - `:hiccup` - add middleware to automatically parse Hiccup responses
  - `:site` - add middleware and configuration for a user-facing web app

  A Duct `port` variable is added to configure the port the HTTP server will
  run on (default 3000).

  Keyword endpoints in the `:routes` will be converted into refs to handlers,
  and any missing handler will be added to the configuration.

  [1]: https://github.com/metosin/reitit"}

 :duct.middleware.web/log-requests
 {:doc
  "Ring middleware to log each request. Takes the following options:
  - `:logger` - a logger satisfying `duct.logger/Logger`
  - `:level` - the level to log requests at (default `:info`)"}

 :duct.middleware.web/log-errors
 {:doc
  "Ring middleware to log uncaught exceptions. Takes the following options:
  - `:logger` - a logger satisfying `duct.logger/Logger`"}

 :duct.middleware.web/hide-errors
 {:doc
  "Ring mddleware that hides any uncaught exceptions behind a 500 'Internal
  Error' response generated by an error handler. Intended for use in production
  when exception details need to be hidden.

  Takes the following options:
  - `:error-handler` - the error handler used when there are exceptions"}

 :duct.middleware.web/defaults
 {:doc
  "A collection of sensible Ring middleware defaults, using the
  [Ring-Defaults][1] library. Takes a Ring-Defaults configuration as its
  options map.

  [1]: https://github.com/ring-clojure/ring-defaults"}

 :duct.middleware.web/webjars
 {:doc
  "Ring middleware to serve static resources from [WebJars][1]. Takes
  the following options:
  - `:path` - the path to serve the assets on (default \"/assets\")"}

 :duct.middleware.web/stacktrace
 {:doc
  "Ring middleware that generates a stacktrace for uncaught exceptions.
  Intended for development use when seeing the stacktrace could be useful.

  Takes the following options:
  - `:color?` - if true, use ANSI colors at the terminal (default false)"}

 :duct.middleware.web/hiccup
 {:doc
  "Ring middleware that looks for response bodies that contain [Hiccup][1]
  vectors, and renders them as a string of HTML5.

  Takes the following options:
  - `:hiccup-renderer` - a function to render Hiccup (defaults to using
                         `hiccup2.core/html`)

  [1]: https://github.com/weavejester/hiccup"}

 :duct.session-store/cookie
 {:doc
  "A Ring session store based on the standard cookie-based store:
  `ring.middleware.session.cookie/cookie-store`. When this key is resumed,
  typically as part of a `(reset)`, it will use the existing store if the
  options haven't changed.

  Takes the following options:
  - `:key` - a string containing 16 hex-encoded bytes generated from a
             secure random source, or `nil` if a random key should be
             generated (the default)"}}
